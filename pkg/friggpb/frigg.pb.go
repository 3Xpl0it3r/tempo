// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frigg.proto

/*
Package friggpb is a generated protocol buffer package.

It is generated from these files:
	frigg.proto

It has these top-level messages:
	PushRequest
	PushResponse
	PushTrace
	TraceByIDRequest
	TraceByIDResponse
	Trace
*/
package friggpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import opentelemetry_proto_collector_trace_v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/collector/traces/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PushRequest struct {
	Id            []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ResourceSpans []byte `protobuf:"bytes,2,opt,name=resourceSpans,proto3" json:"resourceSpans,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PushRequest) GetResourceSpans() []byte {
	if m != nil {
		return m.ResourceSpans
	}
	return nil
}

type PushResponse struct {
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PushTrace struct {
	Batches [][]byte `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (m *PushTrace) Reset()                    { *m = PushTrace{} }
func (m *PushTrace) String() string            { return proto.CompactTextString(m) }
func (*PushTrace) ProtoMessage()               {}
func (*PushTrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PushTrace) GetBatches() [][]byte {
	if m != nil {
		return m.Batches
	}
	return nil
}

type TraceByIDRequest struct {
	TraceID []byte `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
}

func (m *TraceByIDRequest) Reset()                    { *m = TraceByIDRequest{} }
func (m *TraceByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*TraceByIDRequest) ProtoMessage()               {}
func (*TraceByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TraceByIDRequest) GetTraceID() []byte {
	if m != nil {
		return m.TraceID
	}
	return nil
}

type TraceByIDResponse struct {
	Trace *Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty"`
}

func (m *TraceByIDResponse) Reset()                    { *m = TraceByIDResponse{} }
func (m *TraceByIDResponse) String() string            { return proto.CompactTextString(m) }
func (*TraceByIDResponse) ProtoMessage()               {}
func (*TraceByIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TraceByIDResponse) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type Trace struct {
	Batches []*opentelemetry_proto_collector_trace_v1.ResourceSpans `protobuf:"bytes,1,rep,name=batches" json:"batches,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Trace) GetBatches() []*opentelemetry_proto_collector_trace_v1.ResourceSpans {
	if m != nil {
		return m.Batches
	}
	return nil
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "friggpb.PushRequest")
	proto.RegisterType((*PushResponse)(nil), "friggpb.PushResponse")
	proto.RegisterType((*PushTrace)(nil), "friggpb.PushTrace")
	proto.RegisterType((*TraceByIDRequest)(nil), "friggpb.TraceByIDRequest")
	proto.RegisterType((*TraceByIDResponse)(nil), "friggpb.TraceByIDResponse")
	proto.RegisterType((*Trace)(nil), "friggpb.Trace")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pusher service

type PusherClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type pusherClient struct {
	cc *grpc.ClientConn
}

func NewPusherClient(cc *grpc.ClientConn) PusherClient {
	return &pusherClient{cc}
}

func (c *pusherClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/friggpb.Pusher/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pusher service

type PusherServer interface {
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterPusherServer(s *grpc.Server, srv PusherServer) {
	s.RegisterService(&_Pusher_serviceDesc, srv)
}

func _Pusher_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friggpb.Pusher/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pusher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friggpb.Pusher",
	HandlerType: (*PusherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Pusher_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frigg.proto",
}

// Client API for Querier service

type QuerierClient interface {
	FindTraceByID(ctx context.Context, in *TraceByIDRequest, opts ...grpc.CallOption) (*TraceByIDResponse, error)
}

type querierClient struct {
	cc *grpc.ClientConn
}

func NewQuerierClient(cc *grpc.ClientConn) QuerierClient {
	return &querierClient{cc}
}

func (c *querierClient) FindTraceByID(ctx context.Context, in *TraceByIDRequest, opts ...grpc.CallOption) (*TraceByIDResponse, error) {
	out := new(TraceByIDResponse)
	err := grpc.Invoke(ctx, "/friggpb.Querier/FindTraceByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Querier service

type QuerierServer interface {
	FindTraceByID(context.Context, *TraceByIDRequest) (*TraceByIDResponse, error)
}

func RegisterQuerierServer(s *grpc.Server, srv QuerierServer) {
	s.RegisterService(&_Querier_serviceDesc, srv)
}

func _Querier_FindTraceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServer).FindTraceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friggpb.Querier/FindTraceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServer).FindTraceByID(ctx, req.(*TraceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Querier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friggpb.Querier",
	HandlerType: (*QuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTraceByID",
			Handler:    _Querier_FindTraceByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frigg.proto",
}

func init() { proto.RegisterFile("frigg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x41, 0x4b, 0xf3, 0x40,
	0x14, 0xfc, 0xda, 0xcf, 0x36, 0xf8, 0xd2, 0x16, 0x5d, 0x14, 0x62, 0x4e, 0x25, 0x54, 0xe8, 0x41,
	0x36, 0x34, 0xd2, 0x83, 0x5e, 0x04, 0x2d, 0x62, 0x4f, 0x6a, 0xea, 0xc1, 0x9b, 0xb4, 0xdb, 0x67,
	0xbb, 0x50, 0xb3, 0x71, 0x77, 0x53, 0xe8, 0xbf, 0x97, 0xec, 0x26, 0x21, 0x11, 0x6f, 0x3b, 0x6f,
	0x66, 0xdf, 0x9b, 0x19, 0x70, 0x3f, 0x25, 0xdf, 0x6c, 0x68, 0x2a, 0x85, 0x16, 0xc4, 0x31, 0x20,
	0x5d, 0xf9, 0xb7, 0x22, 0xc5, 0x44, 0xe3, 0x0e, 0xbf, 0x50, 0xcb, 0x43, 0x68, 0xd8, 0x90, 0x89,
	0xdd, 0x0e, 0x99, 0x16, 0x32, 0xd4, 0x72, 0xc9, 0x30, 0xdc, 0x4f, 0xec, 0xe3, 0x43, 0xa1, 0xdc,
	0x73, 0x86, 0x76, 0x49, 0xf0, 0x00, 0xee, 0x4b, 0xa6, 0xb6, 0x31, 0x7e, 0x67, 0xa8, 0x34, 0x19,
	0x40, 0x9b, 0xaf, 0xbd, 0xd6, 0xb0, 0x35, 0xee, 0xc5, 0x6d, 0xbe, 0x26, 0x23, 0xe8, 0x4b, 0x54,
	0x22, 0x93, 0x0c, 0x17, 0xe9, 0x32, 0x51, 0x5e, 0xdb, 0x50, 0xcd, 0x61, 0x30, 0x80, 0x9e, 0x5d,
	0xa2, 0x52, 0x91, 0x28, 0x0c, 0x2e, 0xe1, 0x38, 0xc7, 0x6f, 0xf9, 0x3d, 0xe2, 0x81, 0xb3, 0x5a,
	0x6a, 0xb6, 0x45, 0xe5, 0xb5, 0x86, 0xff, 0xc7, 0xbd, 0xb8, 0x84, 0xc1, 0x15, 0x9c, 0x18, 0xc9,
	0xfd, 0x61, 0x3e, 0x2b, 0x0d, 0x78, 0xe0, 0x18, 0x9b, 0xf3, 0x59, 0xe1, 0xa2, 0x84, 0xc1, 0x0d,
	0x9c, 0xd6, 0xd4, 0xf6, 0x12, 0x19, 0x41, 0xc7, 0xf0, 0x46, 0xec, 0x46, 0x03, 0x5a, 0x74, 0x42,
	0x8d, 0x34, 0xb6, 0x64, 0xf0, 0x0e, 0x1d, 0xeb, 0xe5, 0xb9, 0xe9, 0xc5, 0x8d, 0xa6, 0xb4, 0xd1,
	0x9d, 0x2d, 0x85, 0x56, 0xdd, 0x51, 0xf3, 0x9f, 0xee, 0x27, 0x34, 0xae, 0x07, 0xae, 0x22, 0x44,
	0x77, 0xd0, 0xcd, 0x93, 0xa2, 0x24, 0x53, 0x38, 0xca, 0x5f, 0xe4, 0xac, 0xb2, 0x50, 0xeb, 0xd5,
	0x3f, 0xff, 0x35, 0x2d, 0x8a, 0xfa, 0x17, 0x2d, 0xc0, 0x79, 0xcd, 0x50, 0x72, 0x94, 0xe4, 0x09,
	0xfa, 0x8f, 0x3c, 0x59, 0x57, 0x21, 0xc9, 0x45, 0x33, 0x4d, 0xad, 0x26, 0xdf, 0xff, 0x8b, 0x2a,
	0x97, 0xae, 0xba, 0x26, 0xc6, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0xf9, 0x5b, 0x1b,
	0x2f, 0x02, 0x00, 0x00,
}
